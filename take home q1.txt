// C++ Implementation of the Quick Sort Algorithm.

#include <bits/stdc++.h>
using namespace std;
#include <chrono>
using namespace std::chrono;


int partition(int arr[], int start, int end)
{

	int pivot = arr[start];

	int count = 0;
	for (int i = start + 1; i <= end; i++) {
		if (arr[i] <= pivot)
			count++;
	}

	// Giving pivot element its correct position
	int pivotIndex = start + count;
	swap(arr[pivotIndex], arr[start]);

	// Sorting left and right parts of the pivot element
	int i = start, j = end;

	while (i < pivotIndex && j > pivotIndex) {

		while (arr[i] <= pivot) {
			i++;
		}

		while (arr[j] > pivot) {
			j--;
		}

		if (i < pivotIndex && j > pivotIndex) {
			swap(arr[i++], arr[j--]);
		}
	}

	return pivotIndex;
}

void quickSort(int arr[], int start, int end)
{

	// base case
	if (start >= end)
		return;

	// partitioning the array
	int p = partition(arr, start, end);

	// Sorting the left part
	quickSort(arr, start, p - 1);

	// Sorting the right part
	quickSort(arr, p + 1, end);
}

int main()
{
  clock_t time_req; 
  time_req = clock(); 
  int arr1[5500] ;
  for (int i=0;i<=5500;i++){
    arr1[i]=rand()%100;
  }
  int N = sizeof(arr1) / sizeof(arr1[0]);
  quickSort(arr1, 0, N-1); 
  time_req = clock() - time_req; 
  cout << "time to sort arrray 1 which has a length "<<N<<"  : " << (float)time_req/CLOCKS_PER_SEC << " seconds" << endl; 
  
  time_req = clock(); 
  int arr2[11000] ;
  for (int i=0;i<=11000;i++){
    arr2[i]=rand()%100;
  }
  N = sizeof(arr2) / sizeof(arr2[0]);
  quickSort(arr2, 0, N-1); 
  time_req = clock() - time_req; 
  cout << "time to sort arrray 2 which has a length "<<N<<" : " << (float)time_req/CLOCKS_PER_SEC << " seconds" << endl; 
  
  time_req = clock(); 
  int arr3[16000] ;
  for (int i=0;i<=16000;i++){
    arr3[i]=rand()%100;
  }
  N = sizeof(arr3) / sizeof(arr3[0]);
  quickSort(arr3, 0, N-1); 
  time_req = clock() - time_req; 
  cout << "time to sort arrray 3 which has a length "<<N<<" : " << (float)time_req/CLOCKS_PER_SEC << " seconds" << endl;
  
  time_req = clock(); 
  int arr4[18500] ;
  for (int i=0;i<=18500;i++){
    arr4[i]=rand()%100;
  }
  N = sizeof(arr4) / sizeof(arr4[0]);
  quickSort(arr4, 0, N-1); 
  time_req = clock() - time_req; 
  cout << "time to sort arrray 4 which has a length "<<N<<" : " << (float)time_req/CLOCKS_PER_SEC << " seconds" << endl;
  
  time_req = clock(); 
  int arr5[20000] ;
  for (int i=0;i<=20000;i++){
    arr5[i]=rand()%100;
  }
  N = sizeof(arr5) / sizeof(arr5[0]);
  quickSort(arr5, 0, N-1); 
  time_req = clock() - time_req; 
  cout << "time to sort arrray 5 which has a length "<<N<<" : " << (float)time_req/CLOCKS_PER_SEC << " seconds" << endl;
  
  
   return 0;
}














// C++ Implementation of the Quick Sort Algorithm.

#include <bits/stdc++.h>
using namespace std;
#include <chrono>
using namespace std::chrono;

// A utility function to swap two elements
void swap(int* a, int* b) {
    int t = *a;
    *a = *b;
    *b = t;
}

/* This function takes last element as pivot,
   places the pivot element at its correct
   position in sorted array, and places all
   smaller (smaller than pivot) to left of
   pivot and all greater elements to right
   of pivot */
int partition(int arr[], int low, int high) {
    int pivot = arr[high];    // pivot
    int i = (low - 1);  // Index of smaller element and indicates the right position of pivot found so far

    for (int j = low; j <= high - 1; j++) {
        // If current element is smaller than or equal to pivot
        if (arr[j] <= pivot) {
            i++;    // increment index of smaller element
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

/* An iterative implementation of quicksort */
void iterativeQuickSort(int arr[], int l, int h) {
    // Create an auxiliary stack
    int stack[h - l + 1];

    // initialize top of stack
    int top = -1;

    // push initial values of l and h to stack
    stack[++top] = l;
    stack[++top] = h;

    // Keep popping from stack while is not empty
    while (top >= 0) {
        // Pop h and l
        h = stack[top--];
        l = stack[top--];

        // Set pivot element at its correct position
        int p = partition(arr, l, h);

        // If there are elements on left side of pivot,
        // then push left side to stack
        if (p - 1 > l) {
            stack[++top] = l;
            stack[++top] = p - 1;
        }

        // If there are elements on right side of pivot,
        // then push right side to stack
        if (p + 1 < h) {
            stack[++top] = p + 1;
            stack[++top] = h;
        }
    }
}

int main()
{
  clock_t time_req; 
  time_req = clock(); 
  int arr1[5500] ;
  for (int i=0;i<=5500;i++){
    arr1[i]=rand()%100;
  }
  int N = sizeof(arr1) / sizeof(arr1[0]);
  iterativeQuickSort(arr1, 0, N-1); 
  time_req = clock() - time_req; 
  cout << "time to sort arrray 1 which has a length "<<N<<"  : " << (float)time_req/CLOCKS_PER_SEC << " seconds" << endl; 
  
  time_req = clock(); 
  int arr2[11000] ;
  for (int i=0;i<=11000;i++){
    arr2[i]=rand()%100;
  }
  N = sizeof(arr2) / sizeof(arr2[0]);
  iterativeQuickSort(arr2, 0, N-1); 
  time_req = clock() - time_req; 
  cout << "time to sort arrray 2 which has a length "<<N<<" : " << (float)time_req/CLOCKS_PER_SEC << " seconds" << endl; 
  
  time_req = clock(); 
  int arr3[16000] ;
  for (int i=0;i<=16000;i++){
    arr3[i]=rand()%100;
  }
  N = sizeof(arr3) / sizeof(arr3[0]);
  iterativeQuickSort(arr3, 0, N-1); 
  time_req = clock() - time_req; 
  cout << "time to sort arrray 3 which has a length "<<N<<" : " << (float)time_req/CLOCKS_PER_SEC << " seconds" << endl;
  
  time_req = clock(); 
  int arr4[18500] ;
  for (int i=0;i<=18500;i++){
    arr4[i]=rand()%100;
  }
  N = sizeof(arr4) / sizeof(arr4[0]);
  iterativeQuickSort(arr4, 0, N-1); 
  time_req = clock() - time_req; 
  cout << "time to sort arrray 4 which has a length "<<N<<" : " << (float)time_req/CLOCKS_PER_SEC << " seconds" << endl;
  
  time_req = clock(); 
  int arr5[20000] ;
  for (int i=0;i<=20000;i++){
    arr5[i]=rand()%100;
  }
  N = sizeof(arr5) / sizeof(arr5[0]);
  iterativeQuickSort(arr5, 0, N-1); 
  time_req = clock() - time_req; 
  cout << "time to sort arrray 5 which has a length "<<N<<" : " << (float)time_req/CLOCKS_PER_SEC << " seconds" << endl;
  
  
   return 0;
}
